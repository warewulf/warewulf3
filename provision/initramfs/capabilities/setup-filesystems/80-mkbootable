#!/bin/sh
#
# Copyright (c) 2001-2003 Gregory M. Kurtzer
#
# Copyright (c) 2003-2017, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of any
# required approvals from the U.S. Dept. of Energy).  All rights reserved.
#
# Copyright (c) 2017 Benjamin S. Allen

# Exit on any non-zero exit code
set -o errexit

# Pipeline's return status is the value of the last (rightmost) command
# to exit with a non-zero status, or zero if all commands exit successfully.
set -o pipefail

[ -f /etc/functions ] && . /etc/functions

NEWROOT="${NEWROOT:-/newroot}"
BOOTLOADER="${WWBOOTLOADER:-}"

GRUBINSTALL="${WWGRUBINSTALL:-}"
GRUBVERS="${WWGRUBVERS:-}"
GRUBMKCONFIG="${WWGRUBMKCONFIG:-}"
GRUBCFG="${WWGRUBCFG:-}"
GRUBDEFAULTCONF="${WWGRUBDEFAULTCONF:-/etc/default/grub}"

CONSOLE="${WWCONSOLE:-}"
KARGS="${WWKARGS:-quiet}"

# Parse the kernel console option for a serial TTY into values useful for /etc/default/grub
parse_console() {
  if [ -n "${CONSOLE}" ]; then
    OIFS="${IFS}"
    set -- $(echo "${CONSOLE}" | sed -nr "s/.*ttyS([0-9]),([0-9]{4,6})([n,o,e])?([5-8])?(r)?.*/\1 \2 \3 \4/p")
    IFS="${OIFS}"

    export SERIALUNIT="${1:-}"
    export SERIALSPEED="${2:-115200}"
    export SERIALPARITY="${3:-no}"
    export SERIALWORD="${4:-8}"
    
    if [ "${SERIALPARITY}" = "n" ]; then
        export SERIALPARITY=no
    elif [ "${SERIALPARITY}" = "o" ]; then
        export SERIALPARITY=odd
    elif [ "${SERIALPARITY}" = "e" ]; then
        export SERIALPARITY=even
    fi
  fi
}

update_default_conf() {
  local CONF="${1}"

  if [ -n "${CONSOLE}" ]; then
    parse_console

    echo "GRUB_CMDLINE_LINUX='console=tty0 console=${CONSOLE} ${KARGS}'" >> "${CONF}"
    if [ -n "${SERIALUNIT}" ]; then
      echo "GRUB_TERMINAL='console serial'" >> "${CONF}"
      echo "GRUB_SERIAL_COMMAND='serial --speed=${SERIALSPEED} --unit=${SERIALUNIT} --word=${SERIALWORD} --parity=${SERIALPARITY}'" >> "${CONF}"
    fi
  fi

}

# Check if running under EFI
check_efi() {
  [ -d "/sys/firmware/efi" ]
}

# Check if the VNFS already has a grubx installed
check_grubx() {
  local GRUBX

  for GRUBX in "${NEWROOT}"/boot/efi/EFI/*/grub*64.efi; do
    if [ -e "${GRUBX}" ]; then
      return 0
    fi
  done
  return 1
}

grub_version() {
  local GRUBINSTALL=$1
  local VERS

  VERS=$(chroot ${NEWROOT} ${GRUBINSTALL} --version | grep -Eo '[0-9]+\.[0-9]+')

  if expr "${VERS}" \< 2 >/dev/null; then
    GRUBVERS=1
    return 0
  elif expr "${VERS}" \>\= 2 >/dev/null && expr "${VERS}" \< 3 >/dev/null; then
    GRUBVERS=2
    return 0
  fi

  return 1
}

find_grub_install() {
  local PATHS

  if [ -z "${1:-}" ]; then
    PATHS="/usr/sbin/grub2-install /usr/sbin/grub-install /sbin/grub-install"
  else
    PATHS="${1}"
  fi

  for path in ${PATHS}; do
    if [ -x "${NEWROOT}/${path}" ]; then
      if chroot "${NEWROOT}" "${path}" --help >/dev/null 2>&1; then
        GRUBINSTALL="${path}"
        return 0
      fi
    fi
  done
  return 1
}

find_grub_mkconfig() {
  local PATHS

  if [ -z "${1:-}" ]; then
    PATHS="/usr/sbin/grub2-mkconfig /usr/sbin/grub-mkconfig"
  else
    PATHS="${1}"
  fi

  for path in ${PATHS}; do
    if [ -x "${NEWROOT}/${path}" ]; then
      GRUBMKCONFIG="${path}"
      return 0
    fi
  done
  return 1
}

# Attempt to figure out where to put grub.cfg
find_grub_cfg() {
  if [ -z "${GRUBCFG:-}" ]; then
    if check_efi && [ -h "${NEWROOT}/etc/grub2-efi.cfg" ]; then
      GRUBCFG=$(chroot "${NEWROOT}" /bin/readlink -f /etc/grub2-efi.cfg)
    elif ! check_efi && [ -h ${NEWROOT}/etc/grub2.cfg ]; then
      GRUBCFG=$(chroot "${NEWROOT}" /bin/readlink -f /etc/grub2.cfg)
    elif [ -d "${NEWROOT}/boot/grub2" ]; then
      GRUBCFG=/boot/grub2/grub.cfg
    elif [ -d "${NEWROOT}/boot/grub" ]; then
      GRUBCFG=/boot/grub/grub.cfg
    else
      return 1
    fi
  fi
  return 0
}

check_and_mount() {
  local SOURCE="${1}"
  local MOUNTPOINT="${2}"
  local TYPE="${3}"
  local OPTS="${4}"
  local MTAB="${5:-}"
  if [ -z "${MTAB}" ]; then
    MTAB=/proc/mounts
  fi

  if grep -q "^${SOURCE} ${MOUNTPOINT} ${TYPE}" "${MTAB}"; then
    if grep -q "^${SOURCE} ${MOUNTPOINT} ${TYPE} ${OPTS}" "${MTAB}"; then
      return 0
    else
      mount -o remount,"${OPTS}" "${MOUNTPOINT}"
      return $?
    fi
  else
    mkdir -p "${MOUNTPOINT}" && \
    mount -t "${TYPE}" -o "${OPTS}" "${SOURCE}" "${MOUNTPOINT}"
    return $?
  fi
}

# Grub's 10_linux checks for device UUID symlinks exist in /dev/disk/by-uuid
# before it'll use UUIDs for the root device.
dev_symlinks() {
  local DEVFS
  local DEV
  local PART
  local UUID
  local LABEL

  DEVFS="${1}"
  DEV="${2}"

  mkdir -p "${DEVFS}/disk/by-uuid"

  for PART in ${DEV}*; do
    eval $(blkid "${PART}" | cut -f2 -d: || true)
    if [ -n "${UUID:-}" ]; then
      ln -fs "${PART}" "${DEVFS}/disk/by-uuid/${UUID}"
      unset UUID
    fi
  done
}

{
  if [ -n "${BOOTLOADER}" ]; then
    if [ "${BOOTLOADER:0:5}" != "/dev/" ]; then
      BOOTLOADER="/dev/${BOOTLOADER}"
    fi
    if [ ! -e "${BOOTLOADER}" ]; then
      echo "BOOTLOADER=$BOOTLOADER is doesn't exist."
      exit 2
    elif [ ! -b "${BOOTLOADER}" ]; then
      echo "BOOTLOADER=$BOOTLOADER is not a block device."
      exit 2
    fi
  else
    # Skipping
    exit 1
  fi

  if ! find_grub_install "${GRUBINSTALL}"; then
    echo "grub-install or grub2-install is not installed."
    exit 2
  fi

  if ! grub_version "${GRUBINSTALL}"; then
    echo "Could not determine version of Grub."
    exit 2
  fi

  if [ "${GRUBVERS}" -eq 2 ]; then
    if ! find_grub_mkconfig "${GRUBMKCONF}"; then
      echo "grub-mkconfig or grub2-mkconfig is not installed."
      exit 2
    fi
  elif [ "${GRUBVERS}" -eq 1 ]; then
    # For now no-op Grub v1
    echo "Grub version not supported: ${GRUBVERS}"
    exit 2
  else
    echo "Unknown Grub version: ${GRUBVERS}"
    exit 2
  fi

  check_and_mount sysfs "${NEWROOT}/sys" sysfs rw,relatime
  check_and_mount proc "${NEWROOT}/proc" proc rw,relatime
  if check_efi; then
    modprobe efivarfs 2>/dev/null || true
    check_and_mount efivars "${NEWROOT}/sys/firmware/efi/efivars" efivarfs rw,relatime
  fi

  dev_symlinks "${NEWROOT}/dev" "${BOOTLOADER}"

  if ! find_grub_cfg; then
    echo "Could not determine correct path for grub.cfg"
    exit 2
  fi

  update_default_conf "${NEWROOT}${GRUBDEFAULTCONF}"

  # If running under EFI and grubx is already installed, only generate a new config.
  if check_efi && check_grubx; then
    if ! chroot "${NEWROOT}" "${GRUBMKCONFIG}" -o "${GRUBCFG}" >/dev/null; then
      echo "grub-mkconfig failed."
      exit 2
    fi
  else
    if ! chroot "${NEWROOT}" "${GRUBMKCONFIG}" -o "${GRUBCFG}" >/dev/null; then
      echo "grub-mkconfig failed."
      exit 2
    fi 
    if chroot "${NEWROOT}" "${GRUBINSTALL}" "${BOOTLOADER}" >/dev/null; then
       exit 0
    else
      echo "grub-install failed."
      exit 2
    fi
  fi
}
