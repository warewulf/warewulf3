# FYI: Value of $Use_DNF is not important. If it isn't empty, it will evaluate to true.
if [ $USE_DNF ];
    YUM_BIN="dnf"
    YUM_CMD="dnf -y -c $CHROOTDIR/$YUM_CONF --installroot $CHROOTDIR"
    YUM_REPOCMD="dnf config-manager -y -c $CHROOTDIR/$YUM_CONF --installroot $CHROOTDIR"
    YUM_CONF="/etc/dnf/dnf.conf"
else    
    YUM_BIN="yum"
    YUM_CMD="yum -y -c $CHROOTDIR/$YUM_CONF --tolerant --installroot $CHROOTDIR"
    YUM_REPOCMD="yum-config-manager -y -c $CHROOTDIR/$YUM_CONF --tolerant --installroot $CHROOTDIR"
    YUM_CONF="/etc/yum.conf"
fi

distro_check() {
    if [ $USE_DNF ];
        if dnf --version >/dev/null 2>&1 ; then
        echo "ERROR: dnf command not available"
        return 1
    else 
        if yum --version >/dev/null 2>&1 ; then
        echo "ERROR: yum command not available"
        return 1
        if yum-config-manager --version >/dev/null 2>&1 ; then
        echo "ERROR: yum-config-manager command not available"
        return 1
    fi
    return 0
}

set_overlay() {
    if [ ! -d "$CHROOTDIR" -o ! -x "$CHROOTDIR/sbin/init" ]; then
        echo "ERROR: This is an overlay that must work on an existing chroot!"
        return 1
    fi
    if [ ! -f "$CHROOTDIR/etc/redhat-release" ]; then
        echo "ERROR: This must be a Red Hat compatible chroot!"
        return 1
    fi
    PKGR_CMD="$YUM_CMD install $PKGLIST"
    return 0
}

prechroot() {
    if [ -n "$OS_MIRROR" && -z "$YUM_MIRROR" ]; then
        YUM_MIRROR="$OS_MIRROR"
    fi

    if [[ -z "$YUM_MIRROR" && -z "$INSTALL_ISO" ]]; then
        echo "ERROR: You must define the \$YUM_MIRROR or \$INSTALL_ISO variable"
        cleanup
        return 1
    fi

    mkdir -p $CHROOTDIR

    mkdir -m 0755 -p $CHROOTDIR/$(dirname $YUM_CONF)

    echo "[main]" > $CHROOTDIR/$YUM_CONF
    echo 'cachedir=/var/cache/$YUM_BIN/$basearch/$releasever' >> $CHROOTDIR/$YUM_CONF
    echo "keepcache=0" >> $CHROOTDIR/$YUM_CONF
    echo "debuglevel=2" >> $CHROOTDIR/$YUM_CONF
    echo "logfile=/var/log/$YUM_BIN.log" >> $CHROOTDIR/$YUM_CONF
    echo "obsoletes=1" >> $CHROOTDIR/$YUM_CONF
    echo "gpgcheck=0" >> $CHROOTDIR/$YUM_CONF
    echo "plugins=1" >> $CHROOTDIR/$YUM_CONF
    echo "reposdir=0" >> $CHROOTDIR/$YUM_CONF
    echo "reposdir=0" >> $CHROOTDIR/$YUM_CONF
    echo "" >> $CHROOTDIR/$YUM_CONF
    if [ $USE_DNF ]; then
        echo "install_weak_deps=0" >> $CHROOTDIR/$YUM_CONF
    else
        echo "exactarch=1" >> $CHROOTDIR/$YUM_CONF
    fi

    # Add all of the repos found on the ISO image
    if [ -n "$INSTALL_ISO" ]; then
        for i in $(find $MEDIA_MOUNTPATH -type d -name repodata); do
             INSTALLDIRS="$INSTALLDIRS,file://$i"
        done
        YUM_MIRROR="$YUM_MIRROR,$INSTALLDIRS"
    fi

    # Remove all existing repos in CHROOT; just a precaution
    rm -f /etc/yum.repos.d/*

    # Create new repos from comma-seperated list (using bash inline S&R)
    for i ${YUM_MIRROR//,/ }; do
        $YUM_REPOCMD --add-repo $i 
    done

    PKGR_CMD="$YUM_CMD install $PKGLIST"
    return 0
}

postchroot() {
    touch $CHROOTDIR/fastboot

    # we only want to add this kludge to the file once. lets make sure an
    # improperly writen overlay template wont cause repeated file concatenation
    # network-functions is not present on RHEL 8
    NETFILE=$CHROOTDIR/etc/sysconfig/network-scripts/network-functions
    if [ -f $NETFILE ];
        if grep -q 'rename_device' $NETFILE && ! grep -q 'rename_device() { return 0; }' $NETFILE; then
            echo "" >> $NETFILE
            echo "# This is a kludge added by Warewulf so devices don't get renamed (broke things with IB)" >> $NETFILE
            echo "rename_device() { return 0; }" >> $NETFILE
        fi
    fi
    return 0
}

# vim:filetype=sh:syntax=sh:expandtab:ts=4:sw=4:
